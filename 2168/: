import java.util.*;
import java.io.*;

public class Main{
	static int N,M,K;
	static char[][] map;
	static boolean[][][] visited;
	static int[] dx,dy;
	static String target;
	static int target_n;
	static int ret;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		map = new char[M][N];
		dx = new int[4*K+1];
		dy = new int[4*K+1];
		for(int i = 1;i<=K;i++){
			if(i == 0){
				continue;
			}
			dx[i] = i;
			dy[K+i] = i;
			dx[2*K+i] = -i;
			dy[3*K+i] = -i;
		}
		for(int y = 0;y<M;y++){
			for(int x = 0;x<N;x++){
				map[y][x] = (char)br.read();
			}
			br.read();
		}
		target = br.readLine();
		target_n = target.length();
		visited = new boolean[M][N][target_n];
		ret = 0;
		for(int y = 0;y<M;y++){
			for(int x = 0;x<N;x++){
				if(map[y][x] == target.charAt(0)){
					visited[y][x][0] = true;
					probe(x,y,0);
				}
			}
		}
		System.out.println(ret);
	}
	static void probe(int x,int y,int n){
		if(n == target.length()){
			ret++;
			return;
		}
		for(int i = 1;i<=4*K;i++){
			int tx = x + dx[i];
			int ty = y + dy[i];
			if(tx < 0 || ty<0 || tx>=N || ty>= M){
				continue;
			}
			if(map[ty][tx] != target.charAt(n+1)){
				continue;
			}
			if(visited[ty][tx][n+1]){
				continue;
			}
			visited[ty][tx][n+1] = true;
			probe(tx,ty,n+1);
		}
	}
}
